{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression using Scikitlearn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this notebook we will see how to:\n",
    "* Build a basic logistic regression model.\n",
    "* Create the various scoring matrix\n",
    "* Create a ROC using userdefined thresholds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df_train = pd.read_csv('C:/Users/vatsy/Desktop/Python/Class/HW6_part1/data/train.csv')\n",
    "df_test =  pd.read_csv('C:/Users/vatsy/Desktop/Python/Class/HW6_part1/data/test.csv')\n",
    "\n",
    "# Removing the extra index\n",
    "df_train.drop('Unnamed: 0', axis = 1, inplace = True)\n",
    "df_test.drop('Unnamed: 0', axis = 1, inplace = True)\n",
    "\n",
    "\n",
    "# Separating the dependent and independent variables\n",
    "X_train = df_train.drop('target', axis = 1)\n",
    "y_train = df_train['target']\n",
    "X_test = df_test.drop('target', axis = 1)\n",
    "y_test = df_test['target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "      <th>target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>108</td>\n",
       "      <td>269</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>169</td>\n",
       "      <td>1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>150</td>\n",
       "      <td>283</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>162</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>110</td>\n",
       "      <td>248</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>262</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>134</td>\n",
       "      <td>409</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   63    0   0       108   269    0        1      169      1      1.8      1   \n",
       "1   58    0   3       150   283    1        0      162      0      1.0      2   \n",
       "2   65    1   0       110   248    0        0      158      0      0.6      2   \n",
       "3   55    1   1       130   262    0        1      155      0      0.0      2   \n",
       "4   56    0   0       134   409    0        0      150      1      1.9      1   \n",
       "\n",
       "   ca  thal  target  \n",
       "0   2     2       0  \n",
       "1   0     2       1  \n",
       "2   2     1       0  \n",
       "3   0     2       1  \n",
       "4   2     3       0  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>sex</th>\n",
       "      <th>cp</th>\n",
       "      <th>trestbps</th>\n",
       "      <th>chol</th>\n",
       "      <th>fbs</th>\n",
       "      <th>restecg</th>\n",
       "      <th>thalach</th>\n",
       "      <th>exang</th>\n",
       "      <th>oldpeak</th>\n",
       "      <th>slope</th>\n",
       "      <th>ca</th>\n",
       "      <th>thal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>108</td>\n",
       "      <td>269</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>169</td>\n",
       "      <td>1</td>\n",
       "      <td>1.8</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>150</td>\n",
       "      <td>283</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>162</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>65</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>110</td>\n",
       "      <td>248</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>158</td>\n",
       "      <td>0</td>\n",
       "      <td>0.6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>55</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>130</td>\n",
       "      <td>262</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>56</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>134</td>\n",
       "      <td>409</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1.9</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
       "0   63    0   0       108   269    0        1      169      1      1.8      1   \n",
       "1   58    0   3       150   283    1        0      162      0      1.0      2   \n",
       "2   65    1   0       110   248    0        0      158      0      0.6      2   \n",
       "3   55    1   1       130   262    0        1      155      0      0.0      2   \n",
       "4   56    0   0       134   409    0        0      150      1      1.9      1   \n",
       "\n",
       "   ca  thal  \n",
       "0   2     2  \n",
       "1   0     2  \n",
       "2   2     1  \n",
       "3   0     2  \n",
       "4   2     3  "
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    1\n",
       "2    0\n",
       "3    1\n",
       "4    0\n",
       "Name: target, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\vatsy\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "model = LogisticRegression().fit(X_train, y_train)\n",
    "prediction = model.predict(X_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.881578947368421"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.881578947368421"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(prediction,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.83      0.86      0.84        28\n",
      "           1       0.91      0.90      0.91        48\n",
      "\n",
      "    accuracy                           0.88        76\n",
      "   macro avg       0.87      0.88      0.87        76\n",
      "weighted avg       0.88      0.88      0.88        76\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test, prediction))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating ROC curve so we need to create predictions with probability\n",
    "predictions_prob = model.predict_proba(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Here we have 2 columns one of prob and the other of 1-prob. We will choose the first column only\n",
    "predictions_prob = model.predict_proba(X_test)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC value is  0.9270833333333334\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "fpr, tpr, threasholds = roc_curve(y_test,predictions_prob)\n",
    "plt.plot(fpr,tpr)\n",
    "\n",
    "print('AUC value is ', auc(fpr, tpr))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now lets create our own ROC curve from scratch.\n",
    "### Here we need to calculate the TPR, FPR for each thrashold and then plot the curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Making the threashold between 0 and 1.\n",
    "\n",
    "thresholds = np.arange(0.0, 1.01, .01)\n",
    "\n",
    "def roc_curve_userdefined(predictions_prob, thresholds):\n",
    "# false positive rate\n",
    "    fpr = []\n",
    "# true positive rate\n",
    "    tpr = []\n",
    "# get number of positive and negative examples in the dataset\n",
    "    P = sum(y_test)\n",
    "    N = len(y_test) - P\n",
    "# iterate through all thresholds and determine fraction of true positives\n",
    "# and false positives found at this threshold\n",
    "    for thresh in thresholds:\n",
    "        FP=0\n",
    "        TP=0\n",
    "        for i in range(len(predictions_prob)):\n",
    "            if (predictions_prob[i] > thresh):\n",
    "                if y_test[i] == 1:\n",
    "                    TP = TP + 1\n",
    "                if y_test[i] == 0:\n",
    "                    FP = FP + 1\n",
    "        fpr.append(FP/float(N))\n",
    "        tpr.append(TP/float(P))\n",
    "    plt.scatter(fpr, tpr)\n",
    "    plt.show()   \n",
    "    pass\n",
    "#  Implimenting the function\n",
    "roc_curve_userdefined(predictions_prob, thresholds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
